@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject AppSettings appSettings
@inject WebAppSession webApp

@{

    // Pages definito nel modello e passate tramite ViewData.
    // Se le passavo direttamente con Model.Page, ogni pagina che utilizza _Layout
    // andava a cercare la proprietà Pages al''interno del proprio Model.
    // Vedi se puoi caricare Pages direttamente nel service container, per poter accedervi da 
    // qualunque posizione ed evitare di ricalcolarlo ad ogni richiesta. Servirebbe definire però host, necessario per caricare app settings

    // var Pages = ViewData["Pages"] as List<Repository>;

    Console.WriteLine("_Layout.cshtml --> qui passa");
        
    var host = $"{HttpContextAccessor.HttpContext.Request.Scheme}://{HttpContextAccessor.HttpContext.Request.Host}";
    DataAccess data = Utils.GetDataAccess(appSettings, host);
    crossRepository repository = new crossRepository(data, 0);
    // spostato giù
    // var pages = repository.GetRepositoryList(0, "WebPage", false, "", "", "", null, "", false);
    string lang = webApp.currLang;
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@webApp.currPage.GetTitle("it") - RazorApp</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/RazorApp.styles.css" asp-append-version="true" />
</head>
<body>

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" href="/">RazorApp</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        @{
                            List<Repository> pages = repository.GetRepositoryList(0, "WebPage", false, "", "", "", null, "", false);

                            if (pages != null && pages.Count > 0)
                            {
                                foreach (var @pg in pages)
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" href="/@pg.GetLabel(lang)">@pg.GetTitle(lang)</a>
                                    </li>
                                }
                            }
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>


    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>


    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - RazorApp - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)

</body>
</html>

@* @{
    List<Repository> pages = new List<Repository>();
    string lang = "it";

    void onInit()
    {
        
    }
} *@